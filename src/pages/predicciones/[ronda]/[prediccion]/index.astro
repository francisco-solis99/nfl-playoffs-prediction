---
export const prerender = false;

import type { RoundTypeSlug, PredictionPick } from "@/data/types/matches.types";
import { getMatchById, getTotalMatchesByRound } from "@/data/utils/matches";
import Layout from "@/layouts/Layout.astro";
import RadioOptionTeam from "@/components/RadioOptionTeam.astro";

const { ronda: round, prediccion: prediction } = Astro.params;
// Validate
if (!prediction || !round) return Astro.redirect("/404");

const roundType = round as RoundTypeSlug;
const numPredictionMatch = Number(prediction);

// Get the match info
const matchInfo = getMatchById({
  roundName: roundType,
  id: numPredictionMatch,
});

if (!matchInfo) return Astro.redirect("/404");

const { match, conference } = matchInfo;
const confereceType = conference as "AFC" | "NFC";

// get the teams info
const teamsMatch = [match.team1, match.team2];

// handle the submit of the form
const cookieKey = `playoffs-prediction:${round}`
const picks: PredictionPick[] | [] = Astro.cookies.get(cookieKey)?.json() ?? [];
const totalMatches = getTotalMatchesByRound({roundName: roundType})

if(Astro.request.method === 'POST') {

  try {
    const data = await Astro.request.formData()
    const pick = data.get('pick')
    if(typeof pick !== 'string') throw new Error('No answer provided')

    const pickToSet = {
      round,
      matchId: numPredictionMatch,
      pickSelected: pick,
    }
    picks[numPredictionMatch - 1] = pickToSet;

    Astro.cookies.set(cookieKey, JSON.stringify(picks), {
      maxAge: 30 * 24 * 60 * 60 * 1000, //30 days
      path: '/',
      sameSite: true,
      httpOnly: true,
    })

  } catch (error) {
    if (error instanceof Error) {
			console.error(error.message)
		}
  }

  // check when is the last match of that round, maybe a method of matches saying the round name
  if(numPredictionMatch + 1 > totalMatches) return Astro.redirect('/playoffs')
  return Astro.redirect(`/predicciones/${round}/${numPredictionMatch + 1}`)
}


// create the form with eah option ✅
// Get the astro icons fro teams dynamically ✅
// create dynamically the options ✅
// Get the color of the team ✅
// style to get the color when select the option ✅
// Use astro cookies and astro redirect when submit each prediction ✅
// Use view transitions API for Astro ✅
// See the results fro predictions ✅
// Type the prediction object ✅
// Redirect when finish to the playoffs page ✅
// Componetized ✅
// add the trophy for each round ✅
// responsive design ✅
// fix the icons for rounds
// add the option to edit the pick in he playoffs page
// deploy the project to vercel
// add the results (correct picks)
// add some fireworks when scroll to the superbowl (for scroll maybe add the results at the beginning)
// Use a react component for the form maybe
---

<!-- TODO: stepper and using the css variables -->
<Layout
  title="Predicciones Brackets NFL Playoffs 2024"
  description="Predice cada uno de los juegos de playoffs seleccionando a los ganadores de cada encuentro"
>
  <div>
    <h1
      class=`hidden sm:inline-block px-8 py-5 font-monstserrat absolute z-10 left-1/2 -translate-x-1/2 top-10 text-white text-4xl font-bold bg-transparent
      after:content-[''] after:absolute after:inset-1 after:rounded-xl after:bg-indigo-950 after:border after:border-1 after:-z-10`
    >
      Predicción
    </h1>
    <main class="relative">
      <form method="POST">
        <fieldset>
          <legend class="sr-only">Selecciona tu pick para esté duelo</legend>
          <div class="min-h-screen grid sm:grid-cols-2">
            <!-- 2 Options-->
            {
              teamsMatch.map((teamId) => {
                return (
                  <RadioOptionTeam teamId={teamId} conference={confereceType}/>
                )
              })
            }
          </div>
        </fieldset>
         <button
          type="submit"
          class="text-lg px-4 py-2 font-bold border border-1 absolute right-5 top-7 rounded-full bg-gradient-to-b text-white transition-[filter] duration-75  hover:drop-shadow-[0_2px_4px_#fff]"
          title="Next"
        >
          <span>
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-width="2" d="M2 12h20m-9-9l9 9l-9 9"/>
            </svg>
          </span>
        </button>
      </form>
    </main>
  </div>
</Layout>